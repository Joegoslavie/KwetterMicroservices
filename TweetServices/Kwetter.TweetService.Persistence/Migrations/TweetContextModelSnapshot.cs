// <auto-generated />
using System;
using Kwetter.TweetService.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kwetter.TweetService.Persistence.Migrations
{
    [DbContext(typeof(TweetContext))]
    partial class TweetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kwetter.TweetService.Persistence.Entity.HashtagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TweetEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TweetEntityId");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("Kwetter.TweetService.Persistence.Entity.LikeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorUserId")
                        .HasColumnType("int");

                    b.Property<int>("TweetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId");

                    b.HasIndex("TweetId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Kwetter.TweetService.Persistence.Entity.MentionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DirectedToUserId")
                        .HasColumnType("int");

                    b.Property<int>("TweetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DirectedToUserId");

                    b.HasIndex("TweetId");

                    b.ToTable("Mentions");
                });

            modelBuilder.Entity("Kwetter.TweetService.Persistence.Entity.ProfileReferenceEntity", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("ProfileReferences");
                });

            modelBuilder.Entity("Kwetter.TweetService.Persistence.Entity.TweetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorUserId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Reported")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AuthorUserId");

                    b.ToTable("Tweets");
                });

            modelBuilder.Entity("Kwetter.TweetService.Persistence.Entity.HashtagEntity", b =>
                {
                    b.HasOne("Kwetter.TweetService.Persistence.Entity.TweetEntity", null)
                        .WithMany("Hashtags")
                        .HasForeignKey("TweetEntityId");
                });

            modelBuilder.Entity("Kwetter.TweetService.Persistence.Entity.LikeEntity", b =>
                {
                    b.HasOne("Kwetter.TweetService.Persistence.Entity.ProfileReferenceEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserId");

                    b.HasOne("Kwetter.TweetService.Persistence.Entity.TweetEntity", "Tweet")
                        .WithMany("LikedBy")
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Tweet");
                });

            modelBuilder.Entity("Kwetter.TweetService.Persistence.Entity.MentionEntity", b =>
                {
                    b.HasOne("Kwetter.TweetService.Persistence.Entity.ProfileReferenceEntity", "DirectedTo")
                        .WithMany()
                        .HasForeignKey("DirectedToUserId");

                    b.HasOne("Kwetter.TweetService.Persistence.Entity.TweetEntity", "Tweet")
                        .WithMany()
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectedTo");

                    b.Navigation("Tweet");
                });

            modelBuilder.Entity("Kwetter.TweetService.Persistence.Entity.TweetEntity", b =>
                {
                    b.HasOne("Kwetter.TweetService.Persistence.Entity.ProfileReferenceEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Kwetter.TweetService.Persistence.Entity.TweetEntity", b =>
                {
                    b.Navigation("Hashtags");

                    b.Navigation("LikedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
